var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.426,1,2.298]],["body/modules/AppModule.html",[0,1.714,1,4.349,2,1.374,3,2.131,4,2.427,5,2.427,6,3.551,7,0.025,8,3.551,9,3.551,10,3.259,11,2.514,12,1.749,13,1.605,14,0.221,15,0.221,16,0.194,17,2.866,18,2.514,19,0.714,20,3.073,21,2.137,22,1.482,23,2.866,24,2.866,25,2.427,26,2.866,27,3.073,28,2.427,29,0.617,30,4.121,31,2.427,32,2.427,33,2.137,34,2.427,35,2.866,36,2.866,37,2.866,38,2.866,39,2.866,40,5.996,41,2.866,42,4.121,43,2.866,44,2.866,45,2.866,46,2.866,47,2.866,48,2.866,49,2.427,50,1.374,51,1.921,52,2.866,53,2.866,54,0.221,55,0.121,56,0.015,57,0.015]],["title/controllers/AuthenticationController.html",[58,1.772,59,2.298]],["body/controllers/AuthenticationController.html",[7,0.025,13,1.088,14,0.15,15,0.15,16,0.132,19,0.668,27,1.449,29,0.418,50,0.932,54,0.15,55,0.082,56,0.011,57,0.011,58,1.005,59,2.059,60,1.645,61,1.449,62,1.645,63,0.291,64,1.278,65,3.072,66,2.5,67,3.072,68,3.072,69,1.874,70,2.601,71,1.943,72,3.686,73,2.261,74,1.943,75,1.239,76,1.943,77,1.833,78,1.322,79,0.751,80,1.715,81,3.419,82,1.962,83,1.943,84,1.943,85,1.943,86,2.554,87,1.943,88,2.291,89,1.943,90,1.943,91,1.943,92,1.943,93,1.943,94,1.943,95,1.943,96,1.645,97,2.641,98,3.072,99,1.943,100,2.601,101,1.005,102,1.449,103,1.645,104,1.645,105,1.943,106,1.449,107,1.449,108,1.645,109,1.97,110,1.449,111,1.645,112,1.943,113,1.185,114,1.943,115,1.185,116,3.072,117,1.645,118,3.072,119,1.185,120,1.943,121,1.585,122,1.302,123,1.302,124,1.943,125,1.943,126,1.943,127,1.943,128,0.932,129,1.72,130,1.72,131,1.943,132,1.801,133,1.943,134,1.943,135,1.943,136,1.943,137,2.438,138,4.329,139,1.943,140,3.072,141,3.229,142,3.072,143,3.072,144,1.645,145,3.072,146,1.943,147,1.683,148,1.943,149,3.072,150,1.302,151,1.449,152,1.943,153,2.059,154,1.943,155,1.943,156,2.601,157,1.943,158,1.645,159,1.449,160,1.943,161,1.943,162,1.943,163,1.943,164,1.943]],["title/modules/AuthenticationModule.html",[0,1.426,6,2.091]],["body/modules/AuthenticationModule.html",[0,1.64,2,1.293,3,2.038,6,3.912,7,0.025,10,3.191,11,2.405,12,1.645,13,1.51,14,0.207,15,0.207,16,0.183,18,3.128,19,0.728,21,3.823,22,1.394,25,2.283,28,2.283,29,0.58,32,2.283,33,2.94,34,2.283,50,1.89,51,2.642,54,0.207,55,0.114,56,0.014,57,0.014,59,3.124,66,1.203,109,2.946,110,2.01,165,2.283,166,2.696,167,2.283,168,3.476,169,3.476,170,2.696,171,3.942,172,2.283,173,2.283,174,2.01,175,3.338,176,2.696,177,3.942,178,1.293,179,2.696,180,2.696,181,2.01,182,3.591,183,2.696,184,3.338,185,2.283,186,2.696,187,2.283,188,2.696,189,2.696,190,2.696,191,2.283,192,2.283,193,2.696,194,2.283,195,2.696]],["title/injectables/AuthenticationService.html",[109,1.772,196,0.689]],["body/injectables/AuthenticationService.html",[7,0.025,14,0.109,15,0.109,16,0.096,19,0.56,22,0.73,29,0.304,49,2.005,54,0.109,55,0.059,56,0.009,57,0.009,62,1.195,63,0.211,64,0.985,66,2.231,69,0.861,70,2.005,75,1.264,77,1.782,78,1.286,79,0.687,80,1.668,82,1.907,96,2.005,97,2.184,100,2.005,101,1.224,109,1.224,111,1.195,121,1.795,122,0.946,128,1.135,129,2.416,130,1.712,132,1.795,137,2.744,141,2.28,147,1.189,150,2.673,153,2.673,158,2.005,159,1.766,181,1.053,182,2.797,191,2.005,194,2.005,196,0.476,197,0.549,198,1.195,199,5.034,200,2.368,201,3.579,202,2.368,203,2.368,204,2.368,205,3.058,206,1.412,207,4.585,208,1.412,209,2.368,210,1.952,211,4.316,212,1.412,213,1.224,214,1.412,215,2.368,216,1.944,217,1.412,218,3.218,219,2.368,220,1.412,221,2.368,222,1.412,223,1.412,224,1.412,225,4.316,226,1.412,227,3.376,228,1.195,229,1.766,230,2.004,231,1.053,232,1.195,233,1.412,234,2.28,235,3.058,236,2.368,237,2.368,238,2.368,239,3.988,240,3.988,241,3.988,242,3.058,243,1.412,244,1.412,245,1.412,246,1.053,247,2.368,248,2.368,249,1.412,250,0.73,251,1.412,252,2.368,253,2.368,254,1.412,255,1.412,256,2.669,257,2.399,258,1.412,259,1.195,260,3.058,261,1.412,262,1.412,263,3.058,264,1.412,265,1.412,266,1.412,267,2.368,268,2.368,269,2.368,270,1.195,271,2.368]],["title/classes/CreateMovieDto.html",[55,0.144,272,1.919]],["body/classes/CreateMovieDto.html",[7,0.024,14,0.294,15,0.294,16,0.259,19,0.444,54,0.294,55,0.211,56,0.018,57,0.018,63,0.572,73,2.69,75,1.474,78,1.573,79,0.84,210,2.165,272,2.811,273,1.83,274,5.046,275,2.847,276,1.71,277,5.61,278,4.183,279,5.61,280,3.817,281,3.817,282,3.817,283,4.444,284,4.444,285,2.559]],["title/classes/CreateUserDto.html",[55,0.144,286,1.919]],["body/classes/CreateUserDto.html",[7,0.024,14,0.321,15,0.321,16,0.283,54,0.409,55,0.176,56,0.019,57,0.019,63,0.624,75,1.537,78,1.64,79,0.876,210,2.217,213,3.025,250,3.025,273,1.998,276,1.81,286,3.276,287,5.217,288,3.108,289,4.168,290,4.168,291,4.168,292,1.62]],["title/modules/DatabaseModule.html",[0,1.426,8,2.091]],["body/modules/DatabaseModule.html",[0,2.138,2,1.897,7,0.025,8,3.136,14,0.305,15,0.305,16,0.269,18,3.136,19,0.664,21,3.833,22,2.046,29,0.852,33,2.951,54,0.305,55,0.167,56,0.018,57,0.018,79,0.593,182,3.687,184,3.351,185,3.351,187,3.351,250,2.046,293,3.957,294,2.951,295,2.216,296,3.957,297,3.957,298,3.957,299,3.957,300,3.957,301,3.957,302,3.957,303,3.351,304,3.957,305,3.957,306,3.136,307,3.957]],["title/injectables/HttpCacheInterceptor.html",[196,0.689,308,2.556]],["body/injectables/HttpCacheInterceptor.html",[7,0.025,14,0.289,15,0.289,16,0.255,19,0.436,27,4.147,29,0.807,54,0.289,55,0.158,56,0.018,57,0.018,63,0.562,64,2.065,75,0.985,77,1.458,78,1.052,79,0.562,80,1.364,81,2.288,82,1.561,132,2.065,137,2.566,159,3.701,196,0.997,197,1.458,210,1.69,308,3.701,309,3.176,310,1.929,311,4.963,312,4.963,313,5.919,314,3.751,315,3.751,316,4.963,317,5.562,318,3.751,319,3.751,320,3.751,321,3.751,322,3.751]],["title/injectables/JwtAuthenticationGuard.html",[115,2.091,196,0.689]],["body/injectables/JwtAuthenticationGuard.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.666,29,1.009,54,0.361,55,0.198,56,0.021,57,0.021,115,3.489,178,2.248,196,1.149,197,1.823,292,1.823,310,1.823,323,3.497,324,3.97,325,3.497,326,3.97]],["title/injectables/JwtRefreshGuard.html",[123,2.298,196,0.689]],["body/injectables/JwtRefreshGuard.html",[7,0.024,14,0.357,15,0.357,16,0.315,19,0.661,29,0.998,54,0.357,55,0.195,56,0.02,57,0.02,69,2.83,123,3.809,150,3.109,178,2.224,196,1.142,197,1.803,292,1.803,310,1.803,323,3.459,325,3.459,326,3.927,327,3.927]],["title/injectables/JwtRefreshTokenStrategy.html",[196,0.689,328,2.556]],["body/injectables/JwtRefreshTokenStrategy.html",[7,0.025,14,0.217,15,0.217,16,0.191,19,0.694,22,1.458,29,0.607,54,0.217,55,0.119,56,0.015,57,0.015,63,0.422,64,1.694,66,2.133,69,3.194,75,1.07,77,1.583,78,1.142,79,0.61,80,1.481,81,3.64,82,1.173,101,1.458,121,2.178,122,1.89,128,1.952,129,2.28,130,2.28,132,1.694,137,1.458,150,1.89,151,3.037,178,1.352,182,3.531,196,0.818,197,1.096,230,2.932,231,2.102,234,3.565,306,1.72,310,1.096,328,3.037,329,4.048,330,2.387,331,3.037,332,2.387,333,4.048,334,2.819,335,4.072,336,2.819,337,2.387,338,3.037,339,1.89,340,3.037,341,3.037,342,1.72,343,2.102,344,2.387,345,2.387,346,2.819,347,2.387,348,2.819,349,2.819,350,2.819,351,2.819,352,2.819]],["title/injectables/JwtStrategy.html",[168,2.091,196,0.689]],["body/injectables/JwtStrategy.html",[7,0.025,14,0.237,15,0.237,16,0.209,19,0.713,22,1.593,29,0.663,54,0.237,55,0.13,56,0.016,57,0.016,63,0.461,64,1.805,66,2.24,75,1.14,77,1.687,78,1.217,79,0.65,80,1.578,81,3.064,82,1.282,101,1.593,121,2.268,122,2.065,128,2.08,129,2.429,130,2.429,132,1.805,168,2.647,178,1.477,182,3.636,192,2.609,196,0.872,197,1.198,230,3.052,231,2.298,234,2.298,310,1.198,331,3.235,332,2.609,333,4.252,337,2.609,338,2.298,339,2.065,340,2.298,341,2.298,342,1.88,343,2.298,344,2.609,345,2.609,347,2.609,353,2.609,354,3.081,355,4.339,356,3.081,357,2.609,358,3.081,359,3.081]],["title/injectables/LocalAuthenticationGuard.html",[113,2.091,196,0.689]],["body/injectables/LocalAuthenticationGuard.html",[7,0.024,14,0.365,15,0.365,16,0.322,19,0.67,29,1.02,54,0.365,55,0.2,56,0.021,57,0.021,113,3.513,178,2.273,196,1.157,197,1.843,310,1.843,325,3.535,360,4.014,361,4.74]],["title/injectables/LocalStrategy.html",[169,2.091,196,0.689]],["body/injectables/LocalStrategy.html",[7,0.025,14,0.259,15,0.259,16,0.229,19,0.691,29,0.725,54,0.259,55,0.142,56,0.017,57,0.017,63,0.505,64,1.921,66,2.35,75,1.213,77,1.795,78,1.295,79,0.691,80,1.679,82,1.402,88,3.443,109,3.169,110,2.513,128,1.616,132,1.402,147,1.31,169,2.817,178,1.616,196,0.928,197,1.31,210,2.088,213,2.387,250,2.929,310,1.31,331,3.443,338,2.513,339,2.259,341,2.513,343,2.513,357,2.853,362,2.853,363,3.37,364,3.37,365,4.617,366,3.37,367,2.853,368,2.513,369,2.513,370,3.37,371,3.37]],["title/classes/LogInDto.html",[55,0.144,86,2.298]],["body/classes/LogInDto.html",[7,0.024,14,0.31,15,0.31,16,0.274,19,0.469,54,0.4,55,0.219,56,0.019,57,0.019,63,0.604,73,2.494,75,1.367,79,0.779,86,3.861,210,2.073,213,2.978,250,2.978,273,1.933,276,1.772,283,4.295,284,3.879,285,2.702,292,1.567,372,3.413,373,4.031,374,4.031,375,3.413,376,4.031,377,4.405,378,3.413,379,3.413]],["title/entities/Movie.html",[380,2.091,381,1.772]],["body/entities/Movie.html",[7,0.025,14,0.241,15,0.241,16,0.213,19,0.511,54,0.241,55,0.132,56,0.016,57,0.016,63,0.658,73,2.773,75,1.52,78,1.422,79,0.866,147,2.249,210,1.871,216,2.136,276,1.497,278,3.782,368,2.339,380,2.681,381,2.622,382,2.339,383,2.656,384,2.622,385,4.898,386,4.294,387,4.898,388,3.137,389,4.294,390,3.137,391,3.137,392,3.137,393,4.394,394,3.72,395,4.394,396,3.137,397,3.137,398,3.72,399,3.137,400,4.394,401,3.137,402,1.757,403,3.137,404,3.137]],["title/controllers/MovieController.html",[58,1.772,405,2.298]],["body/controllers/MovieController.html",[7,0.025,14,0.154,15,0.154,16,0.136,19,0.64,29,0.431,50,0.96,54,0.154,55,0.084,56,0.011,57,0.011,58,1.035,61,1.493,63,0.3,64,1.308,66,2.523,72,2.685,73,2.11,75,1.156,77,1.711,78,1.341,79,0.824,80,1.601,82,1.831,88,2.345,101,2.008,102,2.345,103,4.05,104,1.695,106,4.317,107,1.493,108,1.695,115,1.221,117,1.695,119,1.221,130,1.121,132,1.831,137,1.035,156,4.05,210,1.927,216,0.778,259,2.663,272,2.464,303,2.663,306,1.918,369,1.493,381,2.746,384,3.102,405,2.108,406,1.695,407,2.663,408,2.663,409,3.145,410,2.663,411,2.002,412,2.002,413,2.002,414,1.695,415,2.002,416,2.002,417,2.002,418,2.002,419,3.145,420,3.404,421,2.002,422,3.145,423,3.145,424,3.145,425,2.002,426,3.145,427,3.145,428,2.002,429,2.002,430,1.695,431,2.685,432,2.002,433,2.002,434,2.002,435,2.002,436,2.002,437,2.175,438,1.695,439,1.342,440,2.345,441,1.695,442,2.002,443,1.493,444,3.145,445,3.884,446,2.002,447,2.002,448,2.002,449,2.002,450,2.002,451,2.002,452,3.145,453,1.695,454,2.002,455,1.695,456,2.002,457,2.002,458,2.002,459,2.002,460,2.002,461,2.002,462,2.002,463,2.002,464,2.002,465,2.002,466,2.002]],["title/interfaces/MovieCountResult.html",[467,1.332,468,2.556]],["body/interfaces/MovieCountResult.html",[7,0.024,14,0.361,15,0.361,16,0.318,54,0.361,56,0.021,57,0.021,63,0.702,79,0.702,216,2.399,276,1.948,292,1.823,467,1.823,468,4.602,469,2.626,470,3.97,471,6.426]],["title/modules/MovieModule.html",[0,1.426,9,2.091]],["body/modules/MovieModule.html",[0,2.101,2,1.847,3,2.611,7,0.025,9,3.887,11,3.081,12,2.35,13,2.157,14,0.296,15,0.296,16,0.261,18,2.35,19,0.723,29,0.829,50,2.421,51,3.385,54,0.296,55,0.162,56,0.018,57,0.018,294,2.872,295,2.157,381,1.991,405,3.777,437,3.568,438,3.261,443,2.872,472,3.261,473,3.261,474,3.851,475,3.851,476,3.851,477,3.261]],["title/classes/MovieNotFoundException.html",[55,0.144,478,2.298]],["body/classes/MovieNotFoundException.html",[7,0.024,14,0.33,15,0.33,16,0.291,19,0.499,29,0.924,54,0.33,55,0.181,56,0.019,57,0.019,75,1.128,77,1.669,78,1.203,79,0.643,80,1.561,128,2.058,216,2.306,273,2.058,292,1.669,310,2.105,384,2.219,455,4.584,478,3.976,479,3.634,480,5.931,481,5.414,482,4.292,483,4.292,484,4.292]],["title/interfaces/MovieSearchBody.html",[467,1.332,485,2.298]],["body/interfaces/MovieSearchBody.html",[7,0.024,14,0.329,15,0.329,16,0.29,54,0.329,56,0.019,57,0.019,63,0.64,79,0.886,210,2.016,216,2.546,276,1.838,278,4.636,292,1.66,384,3.214,386,5.264,467,1.66,469,2.392,485,3.967,486,3.616]],["title/interfaces/MovieSearchResult.html",[467,1.332,487,2.556]],["body/interfaces/MovieSearchResult.html",[7,0.025,14,0.337,15,0.337,16,0.297,19,0.51,54,0.337,56,0.02,57,0.02,63,0.656,79,0.896,216,1.702,276,1.868,292,1.702,467,1.702,469,2.452,485,2.936,487,4.464,488,3.708,489,6.46,490,5.483,491,4.379,492,4.379,493,3.266,494,4.379]],["title/injectables/MovieService.html",[196,0.689,437,1.919]],["body/injectables/MovieService.html",[7,0.025,14,0.172,15,0.172,16,0.152,19,0.681,20,1.671,29,0.482,54,0.172,55,0.094,56,0.012,57,0.012,63,0.336,64,1.428,66,2.611,75,1.324,77,1.959,78,1.413,79,0.755,80,1.833,82,1.945,101,1.775,128,1.646,129,1.255,132,1.736,137,2.157,147,2.219,153,3.379,196,0.69,197,0.871,216,2.275,256,2.56,257,2.301,272,2.618,295,1.255,381,2.861,384,2.606,385,2.906,402,1.255,407,2.906,408,2.906,410,2.906,414,2.906,430,2.906,431,2.852,437,1.922,439,1.502,440,2.56,441,1.897,443,1.671,478,1.502,495,1.897,496,3.432,497,2.241,498,3.487,499,2.241,500,3.432,501,3.432,502,2.241,503,2.241,504,3.432,505,2.241,506,2.241,507,1.897,508,2.241,509,2.241,510,2.241,511,2.241,512,3.432,513,2.241,514,2.241,515,2.241,516,4.172,517,2.241,518,2.241,519,3.432,520,2.241,521,2.241,522,2.241,523,2.241]],["title/classes/RegisterDto.html",[55,0.144,97,2.091]],["body/classes/RegisterDto.html",[7,0.025,14,0.226,15,0.226,16,0.199,19,0.488,54,0.323,55,0.177,56,0.015,57,0.015,63,0.439,73,2.704,75,1.482,78,1.582,79,0.845,97,2.983,119,1.79,210,2.172,213,2.528,250,2.528,273,1.407,276,1.428,283,3.977,284,3.977,285,1.967,292,1.141,306,2.557,375,2.485,377,4.14,378,2.485,379,2.485,420,3.277,524,2.485,525,4.889,526,4.14,527,2.934,528,2.934,529,4.191,530,4.191,531,4.191,532,2.934,533,2.934,534,2.934,535,2.934,536,2.934,537,4.191,538,4.191,539,4.191,540,4.191,541,4.889,542,4.191,543,2.934,544,2.934,545,2.934,546,4.889,547,2.934,548,2.934,549,2.934,550,2.934]],["title/interfaces/RequestWithUser.html",[72,2.091,467,1.332]],["body/interfaces/RequestWithUser.html",[7,0.024,14,0.335,15,0.335,16,0.296,19,0.636,54,0.335,56,0.02,57,0.02,63,0.652,72,3.644,79,0.652,81,3.644,147,2.626,276,1.862,292,1.694,310,2.125,342,2.658,368,3.249,467,1.694,469,2.44,551,3.689]],["title/interfaces/TokenPayload.html",[230,1.919,467,1.332]],["body/interfaces/TokenPayload.html",[7,0.024,14,0.365,15,0.365,16,0.322,54,0.365,56,0.021,57,0.021,63,0.71,79,0.71,216,2.411,218,4.81,230,3.224,276,1.961,467,1.843,469,2.654,552,4.014]],["title/classes/UpdateMovieDto.html",[55,0.144,431,2.091]],["body/classes/UpdateMovieDto.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.666,54,0.361,55,0.198,56,0.021,57,0.021,272,2.626,273,2.248,275,3.497,310,1.823,431,3.489,440,3.497,553,3.97,554,3.97,555,3.497,556,3.497,557,3.143,558,4.689]],["title/classes/UpdateUserDto.html",[55,0.144,559,2.556]],["body/classes/UpdateUserDto.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.666,54,0.361,55,0.198,56,0.021,57,0.021,273,2.248,286,2.626,288,3.497,310,1.823,554,3.97,555,3.497,556,3.497,557,3.143,559,4.265,560,3.97,561,3.497,562,4.689]],["title/entities/User.html",[147,1.332,380,2.091]],["body/entities/User.html",[7,0.025,14,0.192,15,0.192,16,0.169,19,0.518,54,0.192,55,0.157,56,0.013,57,0.013,63,0.373,73,2.752,75,1.508,78,1.248,79,0.86,80,2.146,147,1.446,199,5.682,210,2.091,213,2.302,216,1.446,250,2.302,276,1.267,306,3.599,380,2.27,381,2.968,382,1.859,384,2.302,387,4.86,389,3.769,394,3.151,398,3.151,402,1.396,526,3.769,563,2.111,564,3.769,565,4.452,566,4.452,567,3.721,568,2.493,569,2.493,570,2.493,571,2.493,572,2.493,573,2.493,574,2.493,575,2.493,576,2.493,577,3.721,578,4.452,579,2.111,580,2.493,581,2.493,582,4.452]],["title/controllers/UsersController.html",[58,1.772,583,2.298]],["body/controllers/UsersController.html",[7,0.025,14,0.277,15,0.277,16,0.244,19,0.706,29,0.774,50,1.723,54,0.277,55,0.151,56,0.017,57,0.017,58,1.858,61,2.681,63,0.538,64,2.007,73,1.723,75,0.944,77,1.397,78,1.008,79,0.538,80,1.307,82,1.495,102,2.681,106,3.597,107,2.681,113,2.193,119,2.193,121,2.265,130,2.013,132,1.495,144,3.044,286,3.499,369,2.681,439,2.41,557,3.234,561,2.681,583,3.234,584,3.044,585,3.595,586,3.595,587,3.595,588,3.595,589,3.044,590,4.824,591,4.824,592,3.595,593,3.595,594,3.595,595,3.595]],["title/modules/UsersModule.html",[0,1.426,10,1.919]],["body/modules/UsersModule.html",[0,2.047,2,1.775,3,2.544,7,0.025,10,3.601,11,3.002,12,2.259,13,2.073,14,0.285,15,0.285,16,0.251,18,2.259,19,0.713,29,0.797,50,2.359,51,3.298,54,0.285,55,0.156,56,0.018,57,0.018,121,2.82,147,1.439,294,2.761,295,2.073,477,4.166,583,3.704,589,3.135,596,3.135,597,3.135,598,3.135,599,3.703,600,3.703,601,3.135,602,3.703]],["title/injectables/UsersService.html",[121,1.426,196,0.689]],["body/injectables/UsersService.html",[7,0.025,14,0.146,15,0.146,16,0.128,19,0.577,29,0.407,54,0.146,55,0.08,56,0.011,57,0.011,63,0.283,64,1.251,66,2.82,75,1.365,77,2.02,78,1.457,79,0.778,80,1.89,82,2.062,101,2.406,121,1.251,128,1.442,129,1.059,132,1.936,137,2.562,147,2.259,151,2.792,153,3.615,196,0.604,197,0.735,210,1.892,213,1.935,216,2.299,218,3.875,227,3.17,228,1.602,229,2.243,246,1.411,256,2.243,257,2.016,270,1.602,286,2.388,295,1.059,384,1.935,402,1.059,439,1.268,453,2.546,498,3.181,507,1.602,557,2.016,561,1.411,564,3.17,601,1.602,603,1.602,604,3.008,605,3.008,606,3.008,607,3.008,608,3.008,609,1.892,610,1.892,611,3.008,612,3.008,613,1.892,614,1.892,615,3.008,616,1.892,617,3.008,618,1.892,619,3.008,620,1.892,621,3.008,622,1.892,623,3.008,624,1.892,625,1.892,626,3.008,627,3.008,628,3.008,629,1.892,630,1.892,631,1.892,632,3.008,633,1.892,634,3.008,635,1.892,636,1.892]],["title/coverage.html",[637,3.484]],["body/coverage.html",[7,0.025,16,0.167,55,0.241,56,0.013,57,0.013,58,2.286,59,1.652,60,2.087,69,1.504,72,1.504,79,0.369,86,1.652,97,1.504,109,1.274,113,1.504,115,1.504,121,1.025,123,1.652,147,0.958,168,1.504,169,1.504,196,1.23,198,2.087,230,1.38,257,1.652,272,1.38,274,2.087,275,2.751,286,1.38,287,2.087,288,2.751,308,1.838,309,2.087,323,2.751,324,2.087,327,2.087,328,1.838,329,2.087,330,2.087,353,2.087,360,2.087,362,2.087,372,2.087,380,2.251,381,1.274,383,2.087,405,1.652,406,2.087,431,1.504,437,1.38,467,2.043,468,1.838,470,2.087,478,1.652,479,2.087,485,1.652,486,2.087,487,1.838,488,2.087,495,2.087,524,2.087,551,2.087,552,2.087,553,2.087,559,1.838,560,2.087,563,2.087,583,1.652,584,2.087,603,2.087,637,1.838,638,2.465,639,2.465,640,2.465,641,6.864,642,4.421,643,2.465,644,2.087,645,2.465,646,2.087,647,6.012,648,4.908,649,5.718,650,2.087,651,2.465,652,2.087,653,4.421,654,2.465,655,2.465,656,2.465,657,2.465]],["title/dependencies.html",[3,2.13,658,2.427]],["body/dependencies.html",[3,1.634,7,0.025,20,2.357,22,1.634,29,0.68,31,2.676,55,0.186,56,0.016,57,0.016,119,1.928,141,3.293,172,3.739,173,3.739,174,2.357,175,2.676,178,1.515,181,2.357,229,2.357,285,2.118,295,1.77,339,3.413,340,3.293,342,1.928,367,3.739,402,1.77,555,2.357,556,2.357,579,2.676,659,3.16,660,3.16,661,5.8,662,3.16,663,3.16,664,3.16,665,3.16,666,3.16,667,4.416,668,3.16,669,3.16,670,3.16,671,4.416,672,3.16,673,3.16,674,3.16,675,4.416,676,3.16,677,3.16,678,3.16,679,3.16,680,3.16,681,3.16,682,3.16,683,3.16,684,3.16,685,3.16,686,3.16,687,3.16,688,3.16,689,3.16,690,3.16,691,3.16,692,3.16,693,3.16,694,3.16,695,3.16,696,3.16,697,3.16,698,3.16]],["title/miscellaneous/enumerations.html",[699,1.605,700,3.489]],["body/miscellaneous/enumerations.html",[7,0.023,56,0.022,57,0.022,63,0.76,232,5.078,493,3.785,699,2.842,700,4.297,701,5.075,702,5.075,703,5.075,704,5.075]],["title/miscellaneous/functions.html",[699,1.605,705,3.489]],["body/miscellaneous/functions.html",[7,0.022,56,0.022,57,0.022,63,0.774,650,4.374,652,5.446,699,2.893,705,4.374,706,5.166]],["title/index.html",[63,0.429,707,2.866,708,2.866]],["body/index.html",[7,0.025,56,0.015,57,0.015,174,2.249,342,1.84,402,1.689,420,2.022,498,2.249,637,2.249,709,3.016,710,3.016,711,3.016,712,4.274,713,3.016,714,3.016,715,4.274,716,3.016,717,3.016,718,4.274,719,3.016,720,3.016,721,3.016,722,3.016,723,3.016,724,3.016,725,3.016,726,2.554,727,3.016,728,3.016,729,3.016,730,3.016,731,3.016,732,2.554,733,3.016,734,3.016,735,2.554,736,3.016,737,3.016,738,3.016,739,3.016,740,3.016,741,3.016,742,6.219,743,5.7,744,3.016,745,3.016,746,3.016,747,3.016,748,3.016,749,3.016,750,3.016,751,3.016,752,3.016,753,3.016,754,3.016,755,3.016,756,4.274,757,3.016,758,3.016,759,3.016,760,3.016,761,3.016,762,3.016,763,3.016,764,3.016,765,6.087,766,3.016,767,3.016,768,3.016,769,5.92,770,3.016,771,3.016,772,4.274,773,3.016,774,3.016,775,3.016,776,3.016,777,4.274,778,4.274,779,3.016,780,3.016,781,3.016]],["title/modules.html",[2,2.24]],["body/modules.html",[1,3.143,2,2.248,6,2.861,7,0.021,8,2.861,9,2.861,10,2.626,56,0.021,57,0.021,782,6.426,783,6.426,784,6.426,785,6.588,786,4.689,787,4.689]],["title/overview.html",[788,3.955]],["body/overview.html",[1,4.407,2,1.635,3,2.407,4,2.887,5,2.887,6,4.049,7,0.024,8,3.233,9,3.636,10,3.526,11,2.84,12,2.08,13,1.909,50,1.635,56,0.017,57,0.017,109,2.74,121,2.62,165,2.887,167,2.887,168,3.233,169,3.233,197,1.326,246,2.543,273,1.635,382,2.543,437,2.968,469,1.909,472,2.887,473,2.887,596,2.887,597,2.887,598,2.887,788,2.887,789,4.655,790,3.41,791,3.41,792,3.41]],["title/properties.html",[276,1.404,658,2.427]],["body/properties.html",[7,0.024,56,0.021,57,0.021,276,1.651,420,3.249,726,4.104,732,4.104,735,4.104,793,4.847,794,4.847,795,4.847,796,4.847,797,4.847,798,4.847,799,4.847,800,4.847,801,4.847,802,4.847]],["title/miscellaneous/variables.html",[699,1.605,803,3.489]],["body/miscellaneous/variables.html",[7,0.024,56,0.021,57,0.021,63,0.747,79,0.747,210,1.699,292,1.939,493,3.719,644,4.223,646,5.026,699,2.793,803,4.223,804,4.987,805,4.987]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":794,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":540,"title":{},"body":{"classes/RegisterDto.html":{}}}],["1.0.0",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["120",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["123123123123",{"_index":549,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isstring()@isnotempty()@matches(/^\\+[1",{"_index":543,"title":{},"body":{"classes/RegisterDto.html":{}}}],["17.1.8",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["17.6.0",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":791,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":422,"title":{},"body":{"controllers/MovieController.html":{}}}],["23505",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":790,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":426,"title":{},"body":{"controllers/MovieController.html":{}}}],["5",{"_index":789,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":792,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":548,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":541,"title":{},"body":{"classes/RegisterDto.html":{}}}],["accesstokencookie",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["age=${this.configservice.get",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["api",{"_index":726,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apibody",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiconflictresponse",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":444,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiproperty",{"_index":546,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({deprecated",{"_index":528,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":536,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":445,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags",{"_index":446,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('movies",{"_index":449,"title":{},"body":{"controllers/MovieController.html":{}}}],["app",{"_index":767,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":760,"title":{},"body":{"index.html":{}}}],["applicationlocal",{"_index":763,"title":{},"body":{"index.html":{}}}],["applications",{"_index":724,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":494,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["async",{"_index":66,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["authenticate",{"_index":65,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":71,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":62,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["authentication.guard.ts",{"_index":324,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/guards/jwt",{"_index":442,"title":{},"body":{"controllers/MovieController.html":{}}}],["authentication/guards/localauthentication.guard",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":59,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":109,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":325,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":326,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":361,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":799,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":787,"title":{},"body":{"modules.html":{}}}],["await",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["azure",{"_index":744,"title":{},"body":{"index.html":{}}}],["backend",{"_index":732,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":652,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":785,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":782,"title":{},"body":{"modules.html":{}}}],["build",{"_index":756,"title":{},"body":{"index.html":{}}}],["building",{"_index":719,"title":{},"body":{"index.html":{}}}],["cache",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["cache_key_metadata",{"_index":316,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":317,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["cachemodule.registerasync",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["catch",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checck",{"_index":725,"title":{},"body":{"index.html":{}}}],["check",{"_index":711,"title":{},"body":{"index.html":{}}}],["class",{"_index":55,"title":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/MovieNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":273,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/MovieNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":472,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_providers",{"_index":473,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":596,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":598,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":597,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":387,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":743,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":195,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":348,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('redis_port",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["const",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":363,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":332,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(movieid",{"_index":481,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["constructor(moviesrepository",{"_index":497,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":369,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["container",{"_index":757,"title":{},"body":{"index.html":{}}}],["context",{"_index":315,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.gethandler",{"_index":319,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":320,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":58,"title":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('movie",{"_index":448,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('users",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["count",{"_index":471,"title":{},"body":{"interfaces/MovieCountResult.html":{}}}],["coverage",{"_index":637,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":557,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":730,"title":{},"body":{"index.html":{}}}],["createduser",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createmovie",{"_index":407,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["createmovie(@body",{"_index":458,"title":{},"body":{"controllers/MovieController.html":{}}}],["createmovie(movie",{"_index":501,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmovie(post",{"_index":411,"title":{},"body":{"controllers/MovieController.html":{}}}],["createmoviedto",{"_index":272,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":286,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":564,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/MovieController.html":{}}}],["database/database.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["decorators",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/LogInDto.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":436,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete(':id",{"_index":464,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete(':id')@useguards(jwtauthenticationguard",{"_index":415,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletemovie",{"_index":408,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deletemovie(@param('id",{"_index":465,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletemovie(id",{"_index":414,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deleteresponse",{"_index":520,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteresponse.affected",{"_index":522,"title":{},"body":{"injectables/MovieService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploydocker",{"_index":745,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":547,"title":{},"body":{"classes/RegisterDto.html":{}}}],["description",{"_index":420,"title":{},"body":{"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":727,"title":{},"body":{"index.html":{}}}],["developer",{"_index":735,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":768,"title":{},"body":{"index.html":{}}}],["director",{"_index":277,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["docker",{"_index":742,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":761,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":439,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":441,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["e2e",{"_index":779,"title":{},"body":{"index.html":{}}}],["eager",{"_index":394,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["easier",{"_index":755,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":720,"title":{},"body":{"index.html":{}}}],["email",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":382,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/movie.entity",{"_index":443,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["entities/user.entity",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":380,"title":{"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["enumerations",{"_index":700,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.code",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":542,"title":{},"body":{"classes/RegisterDto.html":{}}}],["exceptions/movienotfound.exception",{"_index":509,"title":{},"body":{"injectables/MovieService.html":{}}}],["exclude",{"_index":578,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":313,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["exist",{"_index":453,"title":{},"body":{"controllers/MovieController.html":{},"injectables/UsersService.html":{}}}],["exist.'})@useguards(jwtauthenticationguard",{"_index":428,"title":{},"body":{"controllers/MovieController.html":{}}}],["exists",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/MovieController.html":{}}}],["expiresin",{"_index":194,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":477,"title":{},"body":{"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":759,"title":{},"body":{"index.html":{}}}],["express",{"_index":342,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{},"index.html":{}}}],["expression",{"_index":539,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":310,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/MovieNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":337,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":345,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["false",{"_index":395,"title":{},"body":{"entities/Movie.html":{}}}],["fetched",{"_index":424,"title":{},"body":{"controllers/MovieController.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["follow",{"_index":748,"title":{},"body":{"index.html":{}}}],["found",{"_index":484,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["framework",{"_index":718,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":525,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":705,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":278,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"interfaces/MovieSearchBody.html":{}}}],["get(':id",{"_index":451,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(':id')@apiparam({name",{"_index":418,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('refresh",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get_cache",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_cache_key",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getauthenticateduser",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken(userid",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getmovie",{"_index":496,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmovie(id",{"_index":504,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebyid",{"_index":409,"title":{},"body":{"controllers/MovieController.html":{}}}],["getmoviebyid(@param('id",{"_index":454,"title":{},"body":{"controllers/MovieController.html":{}}}],["getmoviebyid(id",{"_index":417,"title":{},"body":{"controllers/MovieController.html":{}}}],["getting",{"_index":707,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":427,"title":{},"body":{"controllers/MovieController.html":{}}}],["graph",{"_index":786,"title":{},"body":{"modules.html":{}}}],["guards/jwt",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/localauthentication.guard",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hashedpassword",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["here",{"_index":728,"title":{},"body":{"index.html":{}}}],["hits",{"_index":489,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["host",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["httpcacheinterceptor",{"_index":308,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":384,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["in')@apibody({type",{"_index":85,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":63,"title":{"index.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('movie_publisherid_index",{"_index":403,"title":{},"body":{"entities/Movie.html":{}}}],["index('movie_publisherid_index')@manytoone(undefined",{"_index":392,"title":{},"body":{"entities/Movie.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":196,"title":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":507,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(movie",{"_index":511,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(user",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":764,"title":{},"body":{"index.html":{}}}],["installion",{"_index":746,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":766,"title":{},"body":{"index.html":{}}}],["instead",{"_index":531,"title":{},"body":{"classes/RegisterDto.html":{}}}],["interface",{"_index":467,"title":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interface/requestwithuser.interface",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interface/tokenpayload.interface",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":469,"title":{},"body":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":377,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@isnotempty",{"_index":373,"title":{},"body":{"classes/LogInDto.html":{}}}],["isnotempty",{"_index":283,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":279,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["ispasswordmatching",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":284,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":533,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":375,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["job",{"_index":796,"title":{},"body":{"properties.html":{}}}],["joi",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"injectables/MovieService.html":{},"dependencies.html":{}}}],["joi.number().required",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":340,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt_secret",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":115,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":344,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":123,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":328,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":168,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kill",{"_index":762,"title":{},"body":{"index.html":{}}}],["license",{"_index":797,"title":{},"body":{"properties.html":{}}}],["linkedin",{"_index":709,"title":{},"body":{"index.html":{}}}],["linux",{"_index":752,"title":{},"body":{"index.html":{}}}],["list",{"_index":714,"title":{},"body":{"index.html":{}}}],["literal",{"_index":490,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["local",{"_index":367,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":113,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localstrategy",{"_index":169,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":67,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":86,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logout",{"_index":68,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["makes",{"_index":753,"title":{},"body":{"index.html":{}}}],["manager",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["manytoone",{"_index":400,"title":{},"body":{"entities/Movie.html":{}}}],["match",{"_index":537,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":545,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":550,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":64,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":378,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":379,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":699,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mks",{"_index":734,"title":{},"body":{"index.html":{}}}],["mode",{"_index":772,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["movie",{"_index":381,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"coverage.html":{}}}],["movie.controller",{"_index":475,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.dto",{"_index":440,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{}}}],["movie.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:10",{"_index":281,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:14",{"_index":280,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:6",{"_index":282,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.publisher",{"_index":398,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["movie/entities/movie.entity",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["movie/movie.module",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["moviecontroller",{"_index":405,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviecountresult",{"_index":468,"title":{"interfaces/MovieCountResult.html":{}},"body":{"interfaces/MovieCountResult.html":{},"coverage.html":{}}}],["movieid",{"_index":455,"title":{},"body":{"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{}}}],["moviemodule",{"_index":9,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movienotfoundexception",{"_index":478,"title":{"classes/MovieNotFoundException.html":{}},"body":{"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["movienotfoundexception(id",{"_index":519,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["moviesearchbody",{"_index":485,"title":{"interfaces/MovieSearchBody.html":{}},"body":{"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["moviesearchbody.interface",{"_index":491,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["moviesearchresult",{"_index":487,"title":{"interfaces/MovieSearchResult.html":{}},"body":{"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["movieservice",{"_index":437,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["moviesrepository",{"_index":500,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie})@apiresponse({status",{"_index":425,"title":{},"body":{"controllers/MovieController.html":{}}}],["name",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestjs",{"_index":715,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":555,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmovie",{"_index":512,"title":{},"body":{"injectables/MovieService.html":{}}}],["newuser",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["nilson",{"_index":801,"title":{},"body":{"properties.html":{}}}],["node.js",{"_index":717,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":480,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["npm",{"_index":765,"title":{},"body":{"index.html":{}}}],["null",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":582,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":456,"title":{},"body":{"controllers/MovieController.html":{}}}],["number})@apiresponse({status",{"_index":421,"title":{},"body":{"controllers/MovieController.html":{}}}],["onetomany",{"_index":577,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":572,"title":{},"body":{"entities/User.html":{}}}],["optional",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":510,"title":{},"body":{"injectables/MovieService.html":{}}}],["options(id",{"_index":518,"title":{},"body":{"injectables/MovieService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":788,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":658,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":435,"title":{},"body":{"controllers/MovieController.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":554,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createmoviedto",{"_index":558,"title":{},"body":{"classes/UpdateMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":562,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":339,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":341,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":349,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["patch",{"_index":434,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id",{"_index":461,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id')@useguards(jwtauthenticationguard",{"_index":432,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":352,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":741,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":526,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["plaintextpassword",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["port",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["post('log",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@apiokresponse()@apiconflictresponse()@useguards(localauthenticationguard",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":412,"title":{},"body":{"controllers/MovieController.html":{}}}],["postgres",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":740,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":61,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":389,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["problem",{"_index":733,"title":{},"body":{"index.html":{}}}],["production",{"_index":774,"title":{},"body":{"index.html":{}}}],["profile",{"_index":710,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":716,"title":{},"body":{"index.html":{}}}],["project",{"_index":712,"title":{},"body":{"index.html":{}}}],["promise",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{}}}],["properties",{"_index":276,"title":{"properties.html":{}},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":530,"title":{},"body":{"classes/RegisterDto.html":{}}}],["provide",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/User.html":{}}}],["publisher",{"_index":385,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["publisher.movies",{"_index":393,"title":{},"body":{"entities/Movie.html":{}}}],["publisherid",{"_index":386,"title":{},"body":{"entities/Movie.html":{},"interfaces/MovieSearchBody.html":{}}}],["rafael",{"_index":800,"title":{},"body":{"properties.html":{}}}],["readonly",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["recommended",{"_index":747,"title":{},"body":{"index.html":{}}}],["redis",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{},"index.html":{}}}],["redis_host",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":69,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":327,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":70,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":97,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":538,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relationid",{"_index":401,"title":{},"body":{"entities/Movie.html":{}}}],["relationid((movie",{"_index":404,"title":{},"body":{"entities/Movie.html":{}}}],["relationid(movie",{"_index":397,"title":{},"body":{"entities/Movie.html":{}}}],["removerefreshtoken",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":498,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["req.user",{"_index":460,"title":{},"body":{"controllers/MovieController.html":{}}}],["request",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request._parsedurl.query",{"_index":321,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":350,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request?.cookies?.authentication",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":346,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":72,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":419,"title":{},"body":{"controllers/MovieController.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":769,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":721,"title":{},"body":{"index.html":{}}}],["secret",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":347,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["server",{"_index":722,"title":{},"body":{"index.html":{}}}],["services/movie.service",{"_index":438,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["set",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":754,"title":{},"body":{"index.html":{}}}],["side",{"_index":723,"title":{},"body":{"index.html":{}}}],["sideway/address",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["sideway/formula",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["sideway/pinpoint",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["signoptions",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["solution",{"_index":795,"title":{},"body":{"properties.html":{}}}],["solve",{"_index":731,"title":{},"body":{"index.html":{}}}],["something",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../cachekey.constant.ts",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":60,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:35",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:41",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:53",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:72",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:81",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:104",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:12",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:23",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:36",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:43",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:66",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:80",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:96",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/cachekey.constant.ts",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":372,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:11",{"_index":376,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:6",{"_index":374,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":524,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:12",{"_index":527,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:16",{"_index":534,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":532,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:27",{"_index":535,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:36",{"_index":544,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/jwt",{"_index":323,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/localauthentication.guard.ts",{"_index":360,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/httpcache.interceptor.ts",{"_index":309,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/authentication/httpcache.interceptor.ts:10",{"_index":314,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/authentication/interface/requestwithuser.interface",{"_index":447,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/authentication/interface/requestwithuser.interface.ts",{"_index":551,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interface/tokenpayload.interface.ts",{"_index":552,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt",{"_index":329,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:10",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:25",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":362,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:14",{"_index":366,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:8",{"_index":364,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/database/database.module.ts",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":650,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movie/dto/create",{"_index":274,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movie/dto/update",{"_index":553,"title":{},"body":{"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts",{"_index":383,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts:14",{"_index":390,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:17",{"_index":391,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:20",{"_index":388,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:26",{"_index":396,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:29",{"_index":399,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/exceptions/movienotfound.exception.ts",{"_index":479,"title":{},"body":{"classes/MovieNotFoundException.html":{},"coverage.html":{}}}],["src/movie/exceptions/movienotfound.exception.ts:3",{"_index":482,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["src/movie/movie.controller.ts",{"_index":406,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/movie/movie.controller.ts:46",{"_index":429,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:53",{"_index":413,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:59",{"_index":433,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:65",{"_index":416,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.module.ts",{"_index":474,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/movie/services/movie.service.ts",{"_index":495,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/movie/services/movie.service.ts:12",{"_index":499,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:18",{"_index":502,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:27",{"_index":506,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:38",{"_index":503,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:45",{"_index":505,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/types/moviecountbody.interface.ts",{"_index":470,"title":{},"body":{"interfaces/MovieCountResult.html":{},"coverage.html":{}}}],["src/movie/types/moviesearchbody.interface.ts",{"_index":486,"title":{},"body":{"interfaces/MovieSearchBody.html":{},"coverage.html":{}}}],["src/movie/types/moviesearchresponse.interface.ts",{"_index":488,"title":{},"body":{"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":560,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":508,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":563,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":576,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":574,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":575,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":573,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":599,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":770,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":773,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":775,"title":{},"body":{"index.html":{}}}],["started",{"_index":708,"title":{"index.html":{}},"body":{}}],["starting",{"_index":729,"title":{},"body":{"index.html":{}}}],["statements",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":452,"title":{},"body":{"controllers/MovieController.html":{}}}],["steps",{"_index":749,"title":{},"body":{"index.html":{}}}],["store",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":338,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["string",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieSearchBody.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":713,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":423,"title":{},"body":{"controllers/MovieController.html":{}}}],["super",{"_index":343,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`movie",{"_index":483,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["super.trackby(context",{"_index":322,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["support",{"_index":783,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":784,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":739,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["techs",{"_index":737,"title":{},"body":{"index.html":{}}}],["test",{"_index":778,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":781,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":780,"title":{},"body":{"index.html":{}}}],["tests",{"_index":777,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":371,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getbyid(userid",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.movieservice.createmovie(post",{"_index":459,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.deletemovie(number(id",{"_index":466,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getmovie(movieid",{"_index":457,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.updatemovie(number(id",{"_index":463,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.moviesrepository.create",{"_index":513,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.delete(id",{"_index":521,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.findone",{"_index":517,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.findonebyorfail",{"_index":523,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.save(newmovie",{"_index":514,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.update(id",{"_index":515,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.reflector.get",{"_index":318,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":351,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts",{"_index":330,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":334,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":336,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokenpayload",{"_index":230,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["total",{"_index":492,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["trackby",{"_index":311,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":312,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":579,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["type",{"_index":79,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":402,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":476,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":556,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":738,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["unique",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":776,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":798,"title":{},"body":{"properties.html":{}}}],["up",{"_index":758,"title":{},"body":{"index.html":{}}}],["updatedmovie",{"_index":516,"title":{},"body":{"injectables/MovieService.html":{}}}],["updatemovie",{"_index":410,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatemovie(@param('id",{"_index":462,"title":{},"body":{"controllers/MovieController.html":{}}}],["updatemovie(id",{"_index":430,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatemoviedto",{"_index":431,"title":{"classes/UpdateMovieDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":559,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["use",{"_index":529,"title":{},"body":{"classes/RegisterDto.html":{}}}],["useclass",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":450,"title":{},"body":{"controllers/MovieController.html":{}}}],["user",{"_index":147,"title":{"entities/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.currenthashedrefreshtoken.tostring",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":561,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["userdata",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":370,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":600,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":368,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["users/users.service",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":583,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":333,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":121,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":736,"title":{},"body":{"index.html":{}}}],["validate",{"_index":331,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":365,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":335,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":285,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":493,"title":{},"body":{"interfaces/MovieSearchResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":803,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifypassword",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":793,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":771,"title":{},"body":{"index.html":{}}}],["went",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["windows",{"_index":750,"title":{},"body":{"index.html":{}}}],["witt",{"_index":802,"title":{},"body":{"properties.html":{}}}],["wrong",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsl",{"_index":751,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\nimport { ConfigModule } from '@nestjs/config';\nimport { MovieModule } from './movie/movie.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      useFactory: () => ({\n        ttl: 60,\n      }),\n    }),\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    UsersModule,\n    MovieModule,\n    AuthenticationModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n  UseInterceptors,\n  CacheInterceptor,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './interface/requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './guards/localAuthentication.guard';\nimport JwtAuthenticationGuard from './guards/jwt-authentication.guard';\nimport { ApiBody } from '@nestjs/swagger';\nimport LogInDto from './dto/login.dto';\nimport { UsersService } from '../users/users.service';\nimport JwtRefreshGuard from './guards/jwt-refresh.guard';\n\n@Controller('authentication')\n@UseInterceptors(CacheInterceptor)\nexport class AuthenticationController {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  @ApiBody({ type: LogInDto })\n  async logIn(@Req() request: RequestWithUser): Promise {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategy/jwt.strategy';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayload } from './interface/tokenPayload.interface';\nimport { PostgresErrorCode } from '../database/postgresErrorCodes.enum';\n\n@Injectable()\nexport class AuthenticationService {\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                director\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateMovieDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  gender: string;\n\n  @IsNotEmpty()\n  @IsString()\n  director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/httpCache.interceptor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CACHE_KEY_METADATA,\n  CacheInterceptor,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { User } from '../../users/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/entities/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                publisher\n                            \n                            \n                                publisherId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('movie_publisherId_index')@ManyToOne(undefined, publisher => publisher.movies, {eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisherId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(movie => movie.publisher)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  ManyToOne,\n  RelationId,\n} from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity()\nexport class Movie {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  gender: string;\n\n  @Index('movie_publisherId_index')\n  @ManyToOne(() => User, (publisher: User) => publisher.movies, {\n    eager: false,\n  })\n  publisher: User;\n\n  @RelationId((movie: Movie) => movie.publisher)\n  publisherId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                getMovieById\n                            \n                            \n                                    Async\n                                updateMovie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(post: CreateMovieDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMovieById\n                        \n                    \n                \n            \n            \n                \ngetMovieById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a post that exists in the database', type: Number})@ApiResponse({status: 200, description: 'A post has been successfully fetched', type: Movie})@ApiResponse({status: 404, description: 'A post with given id does not exist.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMovie(id: string, movie: UpdateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { MovieService } from './services/movie.service';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport JwtAuthenticationGuard from '../authentication/guards/jwt-authentication.guard';\nimport { Movie } from './entities/movie.entity';\nimport { ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport RequestWithUser from 'src/authentication/interface/requestWithUser.interface';\n\n@Controller('movie')\n@ApiTags('movies')\n@UseInterceptors(ClassSerializerInterceptor)\n@UseGuards(JwtAuthenticationGuard)\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  @Get(':id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a post that exists in the database',\n    type: Number,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A post has been successfully fetched',\n    type: Movie,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'A post with given id does not exist.',\n  })\n  @UseGuards(JwtAuthenticationGuard)\n  getMovieById(@Param('id') id: string): Promise {\n    const movieId = Number(id);\n    return this.movieService.getMovie(movieId);\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createMovie(@Body() post: CreateMovieDto, @Req() req: RequestWithUser) {\n    return this.movieService.createMovie(post, req.user);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  async updateMovie(@Param('id') id: string, @Body() movie: UpdateMovieDto) {\n    return this.movieService.updateMovie(Number(id), movie);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  async deleteMovie(@Param('id') id: string) {\n    return this.movieService.deleteMovie(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieCountResult.html":{"url":"interfaces/MovieCountResult.html","title":"interface - MovieCountResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieCountResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieCountBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface MovieCountResult {\n  count: number;\n}\n\nexport default MovieCountResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieService } from './services/movie.service';\nimport { MovieController } from './movie.controller';\nimport { Movie } from './entities/movie.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Movie])],\n  controllers: [MovieController],\n  providers: [MovieService],\n  exports: [],\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieNotFoundException.html":{"url":"classes/MovieNotFoundException.html","title":"class - MovieNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/exceptions/movieNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieId: number)\n                    \n                \n                        \n                            \n                                Defined in src/movie/exceptions/movieNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass MovieNotFoundException extends NotFoundException {\n  constructor(movieId: number) {\n    super(`Movie with id ${movieId} not found`);\n  }\n}\n\nexport default MovieNotFoundException;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieSearchBody.html":{"url":"interfaces/MovieSearchBody.html","title":"interface - MovieSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            publisherId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publisherId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publisherId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface MovieSearchBody {\n  id: number;\n  gender: string;\n  publisherId: number;\n}\n\nexport default MovieSearchBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieSearchResult.html":{"url":"interfaces/MovieSearchResult.html","title":"interface - MovieSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieSearchResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import MovieSearchBody from './movieSearchBody.interface';\n\ninterface MovieSearchResult {\n  hits: {\n    total: {\n      value: number;\n    };\n    hits: Array;\n  };\n}\n\nexport default MovieSearchResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/services/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                getMovie\n                            \n                            \n                                    Async\n                                updateMovie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(moviesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/movie/services/movie.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        moviesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(movie: CreateMovieDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movie\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMovie\n                        \n                    \n                \n            \n            \n                \ngetMovie(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMovie(id: number, movie: UpdateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateMovieDto } from '../dto/create-movie.dto';\nimport { UpdateMovieDto } from '../dto/update-movie.dto';\nimport { Movie } from '../entities/movie.entity';\nimport { User } from 'src/users/entities/user.entity';\nimport MovieNotFoundException from '../exceptions/movieNotFound.exception';\nimport { options } from 'joi';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private moviesRepository: Repository,\n  ) {}\n\n  async createMovie(movie: CreateMovieDto, user: User) {\n    const newMovie = await this.moviesRepository.create({\n      ...movie,\n      publisher: user,\n    });\n    await this.moviesRepository.save(newMovie);\n    return newMovie;\n  }\n\n  async updateMovie(id: number, movie: UpdateMovieDto) {\n    await this.moviesRepository.update(id, movie);\n    const updatedMovie = await this.moviesRepository.findOne(\n      options(id, 'publisher'),\n    );\n    if (updatedMovie) {\n      return updatedMovie;\n    }\n    throw new MovieNotFoundException(id);\n  }\n\n  async deleteMovie(id: number) {\n    const deleteResponse = await this.moviesRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new MovieNotFoundException(id);\n    }\n  }\n\n  getMovie(id: number) {\n    return this.moviesRepository.findOneByOrFail({ id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({deprecated: true, description: 'Use the name property instead'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    deprecated: true,\n    description: 'Use the name property instead',\n  })\n  fullName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMovieDto.html":{"url":"classes/UpdateMovieDto.html","title":"class - UpdateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/update-movie.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class UpdateMovieDto extends PartialType(CreateMovieDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                movies\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        movies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Movie[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, movie => movie.publisher, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Movie } from '../../movie/entities/movie.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @OneToMany(() => Movie, (movie: Movie) => movie.publisher, { eager: true })\n  public movies?: Movie[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse()@ApiConflictResponse()@UseGuards(LocalAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiConflictResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { LocalAuthenticationGuard } from '../authentication/guards/localAuthentication.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOkResponse()\n  @ApiConflictResponse()\n  @UseGuards(LocalAuthenticationGuard)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport CreateUserDto from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken.toString(),\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/cacheKey.constant.ts\n            \n            variable\n            GET_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/dto/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/dto/update-movie.dto.ts\n            \n            class\n            UpdateMovieDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/entities/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/exceptions/movieNotFound.exception.ts\n            \n            class\n            MovieNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/movie/services/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/movie/types/movieCountBody.interface.ts\n            \n            interface\n            MovieCountResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/movie/types/movieSearchBody.interface.ts\n            \n            interface\n            MovieSearchBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/types/movieSearchResponse.interface.ts\n            \n            interface\n            MovieSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @sideway/address : ^5.0.0\n        \n            @sideway/formula : ^3.0.0\n        \n            @sideway/pinpoint : ^2.0.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            joi : ^17.6.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n   My LinkedIn Profile\n Check project structure and To Do list   \n\n  NestJS is a progressive Node.js framework for building efficient and scalable server-side applications.\n  \n Checck API details here after starting project\nDescription\nThis repository is created to solve the backend problem to MKS Developer,\nUsing Techs like:\nTypeScript\nTypeORM\nSWAGGER\nPOSTGRESQL\nPGADMIN\nDOCKER\nDOCKER-COMPOSE\nREDIS\nExpress Framework\nNestJS\nAzure DeployDocker Installion (RECOMMENDED)\nIf you do not have Docker neither docker-compose you can follow this steps:\n\nWindows with WSL\nLinux\n\nDocker makes the setup easier\n$ docker-compose build # THIS WILL BUILD THE CONTAINER\n$ docker-compose up # THIS WILL EXPOSE THE APPLICATION \n$ docker-compose down # THIS WILL KILL THE APPLICATIONLocal Installation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Backend API solution to developer job\n        \n            License : UNLICENSED\n        \n            Author : Rafael Nilson Witt\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_CACHE_KEY   (src/.../cacheKey.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/cacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_CACHE'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
